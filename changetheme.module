<?php

/**
 * @file
 * Adds a block to the user with the theme switcher.
 */

/**
 * Implementation of hook_help().
 */
function changetheme_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/modules#description':
      return t('Creates a block to allow users to change themes in an easy way. The block can be enabled by role, the admin can choose which themes belogn to each group.');

    case 'admin/og/og_changetheme':
    case 'admin/og/og_changetheme/themes':
      return t('Set a label for each theme enable. This will be shown to the user in the selection box.');
  }
}

/**
 * Implementation of hook_perm().
 */
function changetheme_perm() {
  return array('administer change theme', 'change theme');
}

/**
 * Implementation of hook_menu().
 */
function changetheme_menu() {
  $items = array();
  $items['admin/og/og_changetheme'] = array(
    'title' => 'Changetheme',
    'description' => "Configure settings for the Changetheme block, as well as the group is activated for.",
    'access arguments' => array('administer switch'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('changetheme_admin_settings'),
    'file' => 'changetheme.admin.inc',
  );
  $items['admin/og/og_changetheme/themes'] = array(
    'title' => 'Themes',
    'description' => 'Theme display settings for the changetheme block.',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  return $items;
}

/**
 * Implementation of hook_init().
 */
function changetheme_init() {
  global $custom_theme, $user;
  $theme_default = variable_get('theme_default', 'garland');
  
  drupal_add_css(drupal_get_path('module', 'changetheme') .'/changetheme.css');
  
  if (changetheme_get_space() == 0 ) {
    $custom_theme = $theme_default;
  }else{
    $custom_theme = changetheme_get_user_space();
  }
  
  // If query parameter 'theme' is set, it always assign a new theme.
  if (isset($_REQUEST['theme'])) {
    $form = array('values' => array('theme' => $_REQUEST['theme']));
    changetheme_switch_form_submit('', $form);
  }
  
  // Other modules may already have set $custom_theme, so it actually switch
  // the theme only if $custom_theme has not been set yet, or if is in the
  // administrative pages and admin_theme has been set to "System default" = '0'
  // The chosen theme is stored in the global user object for authenticated users 
  // that value is automatically used across sessions by Drupal core if the 
  // "change theme" permission has been granted
  if (isset($_SESSION['custom_theme']) && (!isset($custom_theme) || $custom_theme === '0')) {
    $custom_theme = $_SESSION['custom_theme'];
  }
}

/**
 * Implementation of hook_theme().
 */
function changetheme_theme() {
  return array(
    'changetheme_block_form' => array('form' => NULL),
  );
}

/**
 * Implementation of hook_block().
 */
function changetheme_block($op = 'list', $delta = 0, $edit = array()) {
  global $user;
  $space_id = changetheme_get_space();
  
  if ($op == 'list') {
    $blocks[0]['info'] = t('Changetheme form');
    return $blocks;
  }
  elseif ($delta == 0 && $op == 'view' && user_access('change theme') && (!is_null($user->og_groups[$space_id]))) {
    $block['subject'] = t('Change theme');
    $block['content'] = drupal_get_form('changetheme_switch_form');
    return $block;
  }
}

/**
 * Render the form with the names of the themes to switch to.
 */
function changetheme_switch_form() {
  global $user, $custom_theme;
  $form = array();
  $spaces = changetheme_spaces();
  
  if(changetheme_select() == TRUE){
    $form['theme'] = array(
      '#type' => 'select',
      '#default_value' => !empty($custom_theme) ? $custom_theme : $user->theme,
      '#attributes' => array('title' => t('Change the way this site looks.')),
      '#options' => changetheme_select(),
    );
    $form['submit'] = array('#id'=>'changetheme-submit', '#type' => 'submit', '#value' => t('Save'));
    return $form;
  }else{
    $form['theme'] = array(
      '#type' => 'item',
      '#value' => t('There are no themes activated for this group.'),
    );
    return $form;
  }
}

/**
 * Theme the block search form.
 */
function theme_changetheme_block_form($form) {
  return '<div class="container-inline">'. form_render($form) .'</div>';
}

/**
 * Process a block changetheme form submission.
 */
function changetheme_switch_form_submit($form, &$form_state) {
  global $user;
  
  if ($user->uid > 0) {
    changetheme_update_user_space($form_state['values']['theme']);
    
    // Save the setting for authenticated users, if the "change theme"
    // permission has been granted.
    if (user_access('change theme')) {
      $user = user_save($user, array('theme' => $form_state['values']['theme']));
    }
    // Otherwise save the setting in the session, just like for anonymous users.
    else {
      $_SESSION['custom_theme'] = $form_state['values']['theme'];
    }
  }
  elseif (user_access('change theme')) {
    // Save the setting in the session for anonymous users.
    $_SESSION['custom_theme'] = $form_state['values']['theme'];
  }
}

/**
 * Create an array of enabled themes to select from.
 */
function changetheme_options() {
  $options = array();
  $themes = list_themes();
  
  foreach ($themes as $name => $attr) {
    if ($attr->status) {
      $options[$attr->name] = '<b>'.$attr->name .':</b> '. $attr->info['description'];
    }
  }
  
  return $options;
}

/**
 * Create an array of enabled spaces to select from.
 */
function changetheme_spaces() {
  $query = db_query("SELECT node.nid AS nid,
    node.title AS node_title,
    (SELECT COUNT(*) 
      FROM og_uid ou 
      INNER JOIN users u ON ou.uid = u.uid 
      WHERE ou.nid = og.nid AND u.status > 0 AND ou.is_active >= 1 AND ou.is_admin >= 0 
    ) AS member_count,
    (SELECT COUNT(n.nid) 
      FROM node n 
      INNER JOIN og_ancestry oga ON n.nid = oga.nid 
      WHERE n.status = 1 AND oga.group_nid = og.nid
    ) AS post_count,
    og.og_selective AS og_og_selective
  FROM node node 
  LEFT JOIN og og ON node.nid = og.nid
  WHERE (node.type IN ('group')) AND (node.status <> 0)
  ORDER BY node_title ASC");
  
  while ($result = db_fetch_object($query)) {
    $spaces[$result->nid] = $result->node_title;
  }
  
  return $spaces;
}

/**
 * Return the actual space.
 * If not, return 0.
 */
function changetheme_get_space() {
  $space_id = intval(og_determine_context()->nid);
  
  return $space_id;
}

/**
 * Update the actual theme space.
 */
function changetheme_update_user_space($new_theme) {
  global $user, $custom_theme;
  $space_id = changetheme_get_space();
  
  $exist_space = db_fetch_object(db_query("SELECT * FROM {changetheme} WHERE nid = %d AND uid = %d", $space_id, $user->uid));
  
  if(($exist_space == FALSE && $space_id > 0)){
    db_query("INSERT INTO {changetheme} (nid, uid, space_theme) VALUES (%d, %d, '%s')", $space_id, $user->uid, $new_theme);
  }else{
    db_query("UPDATE {changetheme} SET space_theme = '%s' WHERE nid = %d AND uid = %d", $new_theme, $space_id, $user->uid);
  }
  
  return TRUE;
}

/**
 * Return the actual space.
 * If not, return 0.
 */
function changetheme_get_user_space() {
  global $user, $custom_theme;
  $space_id = changetheme_get_space();
  $new_theme = variable_get('theme_default', "garland");
  
  if($space_id > 0){
    $exist_space = db_fetch_object(db_query("SELECT space_theme FROM {changetheme} WHERE nid = %d AND uid = %d", $space_id, $user->uid));
    
    if(!empty($exist_space->space_theme)){
      $new_theme = $exist_space->space_theme;
    }
  }
  
  $custom_theme = $new_theme;
  
  return $custom_theme;
}

/**
 * Create a select list of themes and labels.
 */
function changetheme_select() {
  global $user;
  $select  = array();
  $options = changetheme_options();
  $space_id = changetheme_get_space();
  
  if(is_null($space_id)){
    return FALSE;
  }
  
  $all_options = variable_get('changetheme_'. $space_id, $options);
  
  foreach ($all_options as $op => $option) {
    if(!empty($option)){
      $opt = $options[$op];
      $select[$option] = $op;
      $flag = TRUE;
    }
  }
  
  if($flag == TRUE){
    asort($select);
    return $select;
  }else{
    return FALSE;
  }
}
